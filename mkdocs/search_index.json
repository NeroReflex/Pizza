{
    "docs": [
        {
            "location": "/", 
            "text": "Pizza\n\n\nPizza\n e' un piccolo bot estremamente modulare per \ntutte\n le chat IRC!\n\n\nIl progetto e' mantenuto dai volontari della community di \npierotofy.it", 
            "title": "Home"
        }, 
        {
            "location": "/#pizza", 
            "text": "Pizza  e' un piccolo bot estremamente modulare per  tutte  le chat IRC!  Il progetto e' mantenuto dai volontari della community di  pierotofy.it", 
            "title": "Pizza"
        }, 
        {
            "location": "/compilazione/", 
            "text": "Compilazione\n\n\nLa compilazione di Pizza richiede 3 semplicissime fasi descritte di seguito.\n\n\nParadossalmente la fase piu' complicata e' la preparazione dell'ambiente di lavoro -.-\"\n\n\nPreparazione\n\n\nL'installazione del compilatore e runtime java e' necessaria per lavorare con il progetto.\n\n\nLa versione utilizzata al momento della creazione del progetto e': \njdk 1.8\n\n\nIl processo di compilazione e' automatizzato da \nmaven\n:\ne' altamente consigliato aggiungere la directory bin alla variabile d'ambiente PATH,\nin caso contrario dovrete ogni volta far riferimento al percorso completo.\n\n\nPer scaricare il progetto e' necessario installare \ngit\n o scaricare il progetto come zip da GitHub!\n\n\nOttenere il codice sorgente\n\n\nL'utilizzo di git e' altamente consigliato per scaricare il codice sorgente:\n\n\ngit clone https://github.com/NeroReflex/Pizza.git\ncd Pizza\n\n\n\n\nOra e' possibile passare alla compilazione vera e propria!\n\n\nCompilazione\n\n\nIl processo di compilazione e' descritto nel file bom.xml, destinato al build system maven,\ne va azionato con il comando:\n\n\nmvn compile \n mvn package\n\n\n\n\nUna corretta compilazione produrra' una directory \"target\" contenente un file chiamato \"PizzaBot-1.0-SNAPSHOT.jar\".", 
            "title": "Compilazione"
        }, 
        {
            "location": "/compilazione/#compilazione", 
            "text": "La compilazione di Pizza richiede 3 semplicissime fasi descritte di seguito.  Paradossalmente la fase piu' complicata e' la preparazione dell'ambiente di lavoro -.-\"", 
            "title": "Compilazione"
        }, 
        {
            "location": "/compilazione/#preparazione", 
            "text": "L'installazione del compilatore e runtime java e' necessaria per lavorare con il progetto.  La versione utilizzata al momento della creazione del progetto e':  jdk 1.8  Il processo di compilazione e' automatizzato da  maven :\ne' altamente consigliato aggiungere la directory bin alla variabile d'ambiente PATH,\nin caso contrario dovrete ogni volta far riferimento al percorso completo.  Per scaricare il progetto e' necessario installare  git  o scaricare il progetto come zip da GitHub!", 
            "title": "Preparazione"
        }, 
        {
            "location": "/compilazione/#ottenere-il-codice-sorgente", 
            "text": "L'utilizzo di git e' altamente consigliato per scaricare il codice sorgente:  git clone https://github.com/NeroReflex/Pizza.git\ncd Pizza  Ora e' possibile passare alla compilazione vera e propria!", 
            "title": "Ottenere il codice sorgente"
        }, 
        {
            "location": "/compilazione/#compilazione_1", 
            "text": "Il processo di compilazione e' descritto nel file bom.xml, destinato al build system maven,\ne va azionato con il comando:  mvn compile   mvn package  Una corretta compilazione produrra' una directory \"target\" contenente un file chiamato \"PizzaBot-1.0-SNAPSHOT.jar\".", 
            "title": "Compilazione"
        }, 
        {
            "location": "/utilizzo/", 
            "text": "Utilizzo\n\n\nPrima di poter interagire con il bot e' necessario avviarlo :)\n\n\nQuando il bot viene avviato si unira' in maniera automatica ad un solo canale:\nquello specificato dopo l'host\n\n\ncd dist\njava -jar PizzaBot-1.0-SNAPSHOT.jar \nBotName\n \nserver[:port]\n \n#channel\n\n\n\n\n\nE' possibile specificare se si vuole un pesante output su console riguardo lo stato di funzionamento\ndel bot nel seguente modo:\n\n\njava -jar PizzaBot-1.0-SNAPSHOT.jar \nBotName\n \nserver[:port]\n \n#channel\n \n--verbose\n \non\n\n\n\n\n\nE' altrettanto possibile specificare come verificare l'identita' del bot tramite NickSrv:\n\n\njava -jar PizzaBot-1.0-SNAPSHOT.jar \nBotName\n \nserver[:port]\n \n#channel\n \n--verbose\n \noff\n \n--identity\n \npassword\n\n\n\n\n\nEsempio\n\n\nPerche' non provare il bot in una stanza sperduta di freenode?\n\n\njava -jar PizzaBot-1.0-SNAPSHOT.jar \nmy_bot\n \nirc.freenode.net\n \n#pizzabot\n \n--verbose\n \noff\n\n\n\n\n\nQuando il bot sara' avviato potremmo interagire con esso tramite la chat, ovvero come\nfaranno \nTUTTI\n gli altri utenti della chat!", 
            "title": "Utilizzo"
        }, 
        {
            "location": "/utilizzo/#utilizzo", 
            "text": "Prima di poter interagire con il bot e' necessario avviarlo :)  Quando il bot viene avviato si unira' in maniera automatica ad un solo canale:\nquello specificato dopo l'host  cd dist\njava -jar PizzaBot-1.0-SNAPSHOT.jar  BotName   server[:port]   #channel   E' possibile specificare se si vuole un pesante output su console riguardo lo stato di funzionamento\ndel bot nel seguente modo:  java -jar PizzaBot-1.0-SNAPSHOT.jar  BotName   server[:port]   #channel   --verbose   on   E' altrettanto possibile specificare come verificare l'identita' del bot tramite NickSrv:  java -jar PizzaBot-1.0-SNAPSHOT.jar  BotName   server[:port]   #channel   --verbose   off   --identity   password", 
            "title": "Utilizzo"
        }, 
        {
            "location": "/utilizzo/#esempio", 
            "text": "Perche' non provare il bot in una stanza sperduta di freenode?  java -jar PizzaBot-1.0-SNAPSHOT.jar  my_bot   irc.freenode.net   #pizzabot   --verbose   off   Quando il bot sara' avviato potremmo interagire con esso tramite la chat, ovvero come\nfaranno  TUTTI  gli altri utenti della chat!", 
            "title": "Esempio"
        }, 
        {
            "location": "/plugin/", 
            "text": "Plugins\n\n\nPizza puo' essere esteso tramite diversi tipi di plugins.\n\n\nOgni plugin e' eseguito in un thread a se: questo significa che se il plugin dovesse interrompersi o generare un errore questo sarebbe interrotto senza\ncompromettere la funzionalita' degli altri plugin e del bot stesso!\n\n\nQuesta architettura rende Pizza estendibile a piacere, senza troppe preoccupazioni relative a plugin malfunzionanti!\n\n\nCreazione\n\n\nPer creaare un uovo plugin sono necessari due step:\n\n\n\n\nCreare una classe che erediti dalla classe base pizza.Trancio\n\n\nRegistrare il plugin come \"di sistema\" inserendolo nella funzione loadInternalPlugins in Pizza.java\n\n\n\n\nA questo punto il plugin sara' funzionante, anche se non sara' in grado di fare nulla!\n\n\nOgni plugin ha due modi per essere eseguito: il primo e' a comando, il secondo e' a ciclo continuo.\n\n\nOgni plugin puo' presentare entrambi i metodi/componenti di esecuzione.\n\n\nEstensione\n\n\nFacendo l'override di uno o pie' dei metodi descritti di seguito si estendera' il plugin:\n\n\n- protected void onInitialize(): metodo chiamato nel main thread, al momento della attivazione del plugin, quindi *PERICOLOSO*\n- protected void onShutdown(): metodo chiamato nel main thread, al momento della attivazione del plugin, quindi *PERICOLOSO*\n- protected onCall(String user, String channel, Vector\nString\n args): metodo chiamato nel plugin thread, quando l'utente invoca il plugin\n- protected onPoll(): metodo invocato nel plugin thread continuamente nel minor tempo possibile\n\n\n\nIn onCall(String user, String channel, Vector\n args) user e' il nick dell'utente che ha chiamato il plugin, channel e' il\ncanale usato per richiedere l'esecuzione del plugin e args e' l'elenco di argomenti passati al plugin.\n\n\nAPI\n\n\nIl plugin dovra' interagire attivamente con gli utenti della chat IRC oltre che a svolgere semplici interrogazioni del tipo:\nche canali occupa il bot? A che server e' connesso?\n\n\nPer fare questo TUTTI i plugin hanno accesso ad una serie di metodi che formano l'interfaccia con cui i plugin si rapportano al bot.\n\n\nTali API possono essere consultate nella documentazione della classe pizza.Trancio, ma fornisco qui una lista delle piu' comuni\nfunzioni:\n\n\n- String[] getChannels()\n- void sendMessage(Message msg)\n- void joinChannel(String channel, String key)", 
            "title": "Plugins"
        }, 
        {
            "location": "/plugin/#plugins", 
            "text": "Pizza puo' essere esteso tramite diversi tipi di plugins.  Ogni plugin e' eseguito in un thread a se: questo significa che se il plugin dovesse interrompersi o generare un errore questo sarebbe interrotto senza\ncompromettere la funzionalita' degli altri plugin e del bot stesso!  Questa architettura rende Pizza estendibile a piacere, senza troppe preoccupazioni relative a plugin malfunzionanti!", 
            "title": "Plugins"
        }, 
        {
            "location": "/plugin/#creazione", 
            "text": "Per creaare un uovo plugin sono necessari due step:   Creare una classe che erediti dalla classe base pizza.Trancio  Registrare il plugin come \"di sistema\" inserendolo nella funzione loadInternalPlugins in Pizza.java   A questo punto il plugin sara' funzionante, anche se non sara' in grado di fare nulla!  Ogni plugin ha due modi per essere eseguito: il primo e' a comando, il secondo e' a ciclo continuo.  Ogni plugin puo' presentare entrambi i metodi/componenti di esecuzione.", 
            "title": "Creazione"
        }, 
        {
            "location": "/plugin/#estensione", 
            "text": "Facendo l'override di uno o pie' dei metodi descritti di seguito si estendera' il plugin:  - protected void onInitialize(): metodo chiamato nel main thread, al momento della attivazione del plugin, quindi *PERICOLOSO*\n- protected void onShutdown(): metodo chiamato nel main thread, al momento della attivazione del plugin, quindi *PERICOLOSO*\n- protected onCall(String user, String channel, Vector String  args): metodo chiamato nel plugin thread, quando l'utente invoca il plugin\n- protected onPoll(): metodo invocato nel plugin thread continuamente nel minor tempo possibile  In onCall(String user, String channel, Vector  args) user e' il nick dell'utente che ha chiamato il plugin, channel e' il\ncanale usato per richiedere l'esecuzione del plugin e args e' l'elenco di argomenti passati al plugin.", 
            "title": "Estensione"
        }, 
        {
            "location": "/plugin/#api", 
            "text": "Il plugin dovra' interagire attivamente con gli utenti della chat IRC oltre che a svolgere semplici interrogazioni del tipo:\nche canali occupa il bot? A che server e' connesso?  Per fare questo TUTTI i plugin hanno accesso ad una serie di metodi che formano l'interfaccia con cui i plugin si rapportano al bot.  Tali API possono essere consultate nella documentazione della classe pizza.Trancio, ma fornisco qui una lista delle piu' comuni\nfunzioni:  - String[] getChannels()\n- void sendMessage(Message msg)\n- void joinChannel(String channel, String key)", 
            "title": "API"
        }, 
        {
            "location": "/javadoc/", 
            "text": "Javadoc\n\n\nPotete visualizzare il risultato dell'analisi del sorgente da parte di javadoc online a \nquesto indirizzo\n.", 
            "title": "Javadoc"
        }, 
        {
            "location": "/javadoc/#javadoc", 
            "text": "Potete visualizzare il risultato dell'analisi del sorgente da parte di javadoc online a  questo indirizzo .", 
            "title": "Javadoc"
        }, 
        {
            "location": "/pierotofy/", 
            "text": "Community\n\n\nLa community dietro a Pizza e' quella di \npierotofy.it\n!\n\n\npierotofy.it e' una community italiana di programmatori dove sono il benvenuto gli esperti tanto quanto i novizi.", 
            "title": "Community"
        }, 
        {
            "location": "/pierotofy/#community", 
            "text": "La community dietro a Pizza e' quella di  pierotofy.it !  pierotofy.it e' una community italiana di programmatori dove sono il benvenuto gli esperti tanto quanto i novizi.", 
            "title": "Community"
        }, 
        {
            "location": "/license/", 
            "text": "Licenza\n\n\nPizza\n e' un programma rilasciato sotto licenza \nGPL v3\n, leggere il file LICENSE all'interno del reposotory\nper ulteriori informazioni.", 
            "title": "Licenza"
        }, 
        {
            "location": "/license/#licenza", 
            "text": "Pizza  e' un programma rilasciato sotto licenza  GPL v3 , leggere il file LICENSE all'interno del reposotory\nper ulteriori informazioni.", 
            "title": "Licenza"
        }
    ]
}